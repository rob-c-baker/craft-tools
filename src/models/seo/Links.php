<?php declare(strict_types=1);

namespace alanrogers\tools\models\seo;

use craft\helpers\Html;
use InvalidArgumentException;
use Override;

class Links extends Container
{
    const array ALLOWED_ATTRIBUTES = [
        'as',
        'blocking',
        'crossorigin',
        'disabled',
        'fetchpriority',
        'href',
        'hreflang',
        'imagesizes',
        'imagesrcset',
        'integrity',
        'media',
        'referrerpolicy',
        'rel',
        'sizes',
        'title',
        'type'
    ];

    const array ALLOWED_REL_VALUES = [
        'alternate',
        'author',
        'bookmark',
        'canonical',
        'dns-prefetch',
        'external',
        'help',
        'icon',
        'license',
        'manifest',
        'me',
        'modulepreload',
        'next',
        'nofollow',
        'noopener',
        'noreferrer',
        'opener',
        'pingback',
        'preconnect',
        'prefetch',
        'preload',
        'prerender',
        'prev',
        'privacy-policy',
        'search',
        'stylesheet',
        'tag',
        'terms-of-service',
    ];

    /**
     * @var array Of `rel` attributes that can be sent as HTTP headers
     */
    const array SEND_AS_HEADERS = [
        'modulepreload',
        'preconnect',
        'preload',
        'prefetch',
        'prerender'
    ];

    private array $links = [];


    #[Override]
    public function fields(): array
    {
        return [
            'links'
        ];
    }

    #[Override]
    public function attributes(): array
    {
        return [
            'links'
        ];
    }

    #[Override]
    public function setAttributes($values, $safeOnly = true): void
    {
        parent::setAttributes($values, $safeOnly); // TODO: Change the autogenerated stub
    }

    #[Override]
    public function render(): string
    {
        $html = [];

        $links = array_filter($this->links, function (array $link) {
            return !in_array($link['rel'], self::SEND_AS_HEADERS);
        });

        foreach ($links as $link) {
            $attributes = [
                'rel' => $link['rel'],
                'href' => $link['href'],
                ...$link['attributes']
            ];
            $html[] = Html::tag('link', '', $attributes);
        }

        return implode("\n", $html);
    }

    #[Override]
    public function headers(): array
    {
        $headers = [];
        $items = [];

        $links = array_filter($this->links, function (array $link) {
            return in_array($link['rel'], self::SEND_AS_HEADERS);
        });

        foreach ($links as $link) {
            $l = '<' . urlencode($link['href']) . '>; rel="' . Html::encode($link['rel']) . '"';
            if ($link['attributes']) {
                foreach ($link['attributes'] as $key => $value) {
                    $l .= '; ' . $key . '="' . Html::encode($value) . '"';
                }
            }
            $items[] = $l;
        }
        if ($items) {
            $headers['Link'] = implode(', ', $items);
        }

        return $headers;
    }

    public function setCanonical(string $url): static
    {
        $this->unsetLinks('rel');
        $this->addLink('canonical', $url);
        return $this;
    }

    public function addLink(string $rel, string $href, array $attributes = []): static
    {
        if (!static::validateRel($rel)) {
            throw new InvalidArgumentException('Invalid rel value: ' . $rel);
        }
        foreach ($attributes as $key => $value) {
            if (!in_array($key, self::ALLOWED_ATTRIBUTES)
                || $key === 'href'
                || $key === 'rel') {
                unset($attributes[$key]);
            }
        }
        $this->links[] = [
            'rel' => $rel,
            'href' => $href,
            'attributes' => $attributes
        ];
        return $this;
    }

    public function unsetLinks(string $rel): static
    {
        $this->links = array_filter($this->links, function (array $link) use ($rel) {
            return $link['rel'] !== $rel;
        });
        return $this;
    }

    private static function validateRel(string $rel): bool
    {
        if (str_contains($rel, ' ')) {
            $rel_values = explode(' ', $rel);
            foreach ($rel_values as $rel) {
                if (!in_array($rel, self::ALLOWED_REL_VALUES, true)) {
                    return false;
                }
            }
        }
        return in_array($rel, self::ALLOWED_REL_VALUES, true);
    }
}